/**
 * Drive API Specification
 * Last updated: Jan 20, 2023  ### Release Notes  ### 0.3.0 2023/3/02 - Support fee and tax breakdown in Drive v2  ### 0.2.6 2023/1/20 - Support cash on delivery in Drive v2  ### 0.2.5 2023/1/10 - Support promotion ids in Drive v2  ### 0.2.4 2022/10/12 - Support items   ### 0.2.3 2022/10/12 - Support dasher allowed vehicles   ### 0.2.2 2022/08/15 - Support alcohol delivery in drive v2  ### 0.2.1 2022/06/06 - Adding pickup external store and external business ID  ### 0.2.0 2022/04/11 - Support returnable delivery  ### 0.1.4 2022/04/05 - Add dropoff contact given name - Add dropoff contact family name - Add dropoff contact send sms notifications  ### 0.1.3 2022/04/05 - Add pickup verification image url - Add dropoff verification image url  ### 0.1.2 2022/01/27 - Properly marking all required fields  ### 0.1.1 2022/01/13 - Updated contactless flag name - Added parameters to support scheduled deliveries - remove scheduling model  ### 0.0.15 2021/12/07 - addded locale  ### 0.0.14 12/03/2021 - Added driver_reference_tag  ### 0.0.13 (internal release) 2021/11/24 - Added contactless flag - Added tip support - Updated cancellation failure reasons  ### 0.0.12 (internal release) 2021/11/09 - removed tracking url/support reference from input - addded explicit \"delivery outputs\" class  ### 0.0.11 (internal release) 2021/11/05 - added authorization errors  ### 0.0.10 (internal release) 2021/11/01 - external ID is no longer UUID - add support ID to delivery response - add tracking URL for delivery tracking  ### 0.0.9 (internal release) 2021/10/18 - move scheduling_model into it\'s own subtype  ### 0.0.8 (internal release) 2021/10/16 - converted all operations models into types with `allOf` to mixin values - converted all operations parameters to types  ### 0.0.7 (internal release) 2021/10/15 - removed _cents suffix for i18n coolness - removed dropoff/pickup locations from all APIs for now - All addresses are just one string, not nested - Created UUID type - Added optional pickup_business_name/dropoff_business_name  ### 0.0.6 (internal release) 2021/10/14 - rename estimates to quote - add accept quote endpoint - match create and quote input and response  ### 0.0.5 (internal release) 2021/10/12 - order_value_cents is now optional - removed tips - switch to full addresses instead of address_map {city, zipcode etc) - addded optional place name to address field  ### 0.0.4 (internal release) 2021/10/04 - update the estimate & create to have consistent input  ### 0.0.3 (internal release) - combined pickup / dropoff details into Objective type - added optional Location to pickup/dropoff - added new SchedulingModel type (ASAP only for now) to explicitly set scheduling logic  ### 0.0.2 (internal release) - updated statuses logic and enums  ### 0.0.1 (internal release) - initial version
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: drive-api-support@doordash.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Enum to specify what should the dasher do if the delivery is undeliverable. The default is \"dispose\".
 * @export
 * @enum {string}
 */
export declare const ActionIfUndeliverable: {
    readonly ReturnToPickup: "return_to_pickup";
    readonly Dispose: "dispose";
};
export declare type ActionIfUndeliverable = typeof ActionIfUndeliverable[keyof typeof ActionIfUndeliverable];
/**
 * Authorization error: the credentials provided with the request don\'t work for the requested operation
 * @export
 * @interface AuthorizationError
 */
export interface AuthorizationError {
    /**
     *
     * @type {string}
     * @memberof AuthorizationError
     */
    'code': AuthorizationErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof AuthorizationError
     */
    'message': string;
}
export declare const AuthorizationErrorCodeEnum: {
    readonly AuthorizationError: "authorization_error";
};
export declare type AuthorizationErrorCodeEnum = typeof AuthorizationErrorCodeEnum[keyof typeof AuthorizationErrorCodeEnum];
/**
 *
 * @export
 * @interface CancelNotAllowedError
 */
export interface CancelNotAllowedError {
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'code': CancelNotAllowedErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'reason': CancelNotAllowedErrorReasonEnum;
}
export declare const CancelNotAllowedErrorCodeEnum: {
    readonly CancelNotAllowed: "cancel_not_allowed";
};
export declare type CancelNotAllowedErrorCodeEnum = typeof CancelNotAllowedErrorCodeEnum[keyof typeof CancelNotAllowedErrorCodeEnum];
export declare const CancelNotAllowedErrorReasonEnum: {
    readonly DeliveryAbandoned: "delivery_abandoned";
    readonly DeliveryCancelled: "delivery_cancelled";
    readonly DeliveryCompleted: "delivery_completed";
    readonly DeliveryCreationInProgress: "delivery_creation_in_progress";
    readonly DeliveryPickedUp: "delivery_picked_up";
    readonly CancellationWindowClosed: "cancellation_window_closed";
    readonly DuplicateRequest: "duplicate_request";
};
export declare type CancelNotAllowedErrorReasonEnum = typeof CancelNotAllowedErrorReasonEnum[keyof typeof CancelNotAllowedErrorReasonEnum];
/**
 *
 * @export
 * @interface CreateDeliveryInput
 */
export interface CreateDeliveryInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'external_delivery_id': string;
    /**
     * IETF BCP 47 compliant string representing a user\'s language preference, for the purpose of communication, e.g. `en-US`.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'locale'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with external_store_id to select pickup store by ID. If you provide an external_business_id, you must also provide an external_store_id. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an external_store_id, you must also provide an external_business_id. If you provide an external_store_id, the address of the store will override the pickup_address in the request. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/ .
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_external_store_id'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_address': string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_phone_number': string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'currency'?: string;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof CreateDeliveryInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof CreateDeliveryInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof CreateDeliveryInput
     */
    'dropoff_window'?: TimeWindow;
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof CreateDeliveryInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof CreateDeliveryInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. Choose from \'car\', \'bicycle\' and/or \'walking\'.
     * @type {Array<DasherVehicleType>}
     * @memberof CreateDeliveryInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Flag to specify if the delivery requires signature verification during dropoff
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. If the ID is invalid, a field error will be returned. Create a support ticket in Developer Portal if your promotion ID isn\'t working.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'dropoff_cash_on_delivery'?: number;
}
/**
 * Details about the dasher assigned to this delivery. Details will be provided once a dasher has been assigned and has accepted the delivery.
 * @export
 * @interface DasherDetails
 */
export interface DasherDetails {
    /**
     * The unique identifier for the Dasher
     * @type {number}
     * @memberof DasherDetails
     */
    'dasher_id'?: number;
    /**
     * The first name and last initial of the Dasher delivering the order
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_name'?: string;
    /**
     * Phone number of the dasher for the dropoff contact to use. Number is masked for privacy
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_dropoff_phone_number'?: string;
    /**
     * Phone number of the dasher for the pickup contact to use. Number is masked for privacy
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_pickup_phone_number'?: string;
    /**
     *
     * @type {Location}
     * @memberof DasherDetails
     */
    'dasher_location'?: Location;
    /**
     * Make of the dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_make'?: string;
    /**
     * Model of the dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_model'?: string;
    /**
     * Year of the dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_year'?: string;
}
/**
 * Enum to specify vehicle type.
 * @export
 * @enum {string}
 */
export declare const DasherVehicleType: {
    readonly Car: "car";
    readonly Bicycle: "bicycle";
    readonly Walking: "walking";
};
export declare type DasherVehicleType = typeof DasherVehicleType[keyof typeof DasherVehicleType];
/**
 * Delivery status and details.
 * @export
 * @interface DeliveryBase
 */
export interface DeliveryBase {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryBase
     */
    'external_delivery_id': string;
    /**
     * IETF BCP 47 compliant string representing a user\'s language preference, for the purpose of communication, e.g. `en-US`.
     * @type {string}
     * @memberof DeliveryBase
     */
    'locale'?: string;
}
/**
 * Delivery drop off details.
 * @export
 * @interface DeliveryDropoffDetails
 */
export interface DeliveryDropoffDetails {
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_send_notifications'?: boolean;
}
/**
 * Delivery input only options ID.
 * @export
 * @interface DeliveryInputOnlyOptions
 */
export interface DeliveryInputOnlyOptions {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryInputOnlyOptions
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryInputOnlyOptions
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryInputOnlyOptions
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryInputOnlyOptions
     */
    'dropoff_window'?: TimeWindow;
}
/**
 * Details about an individual item in the order.
 * @export
 * @interface DeliveryItem
 */
export interface DeliveryItem {
    /**
     * Name of the item being delivered.
     * @type {string}
     * @memberof DeliveryItem
     */
    'name': string;
    /**
     * Description of the item being delivered.
     * @type {string}
     * @memberof DeliveryItem
     */
    'description'?: string;
    /**
     * Quantity of the item being delivered.
     * @type {number}
     * @memberof DeliveryItem
     */
    'quantity': number;
    /**
     * Unique ID generated by the caller for the item.
     * @type {string}
     * @memberof DeliveryItem
     */
    'external_id'?: string;
    /**
     * Unit volume of 1 instance of this item, in cubic feet, with or without a decimal point. The overall volume of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'volume'?: number;
    /**
     * Unit weight of 1 instance of this item, in pounds (lbs), with or without a decimal point. The overall weight of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'weight'?: number;
    /**
     * Unit price of 1 instance of this item in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599. The overall price of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'price'?: number;
}
/**
 * Details about the individual items included in the order.
 * @export
 * @interface DeliveryItemsDetails
 */
export interface DeliveryItemsDetails {
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryItemsDetails
     */
    'items'?: Array<DeliveryItem>;
}
/**
 * Delivery options ID.
 * @export
 * @interface DeliveryOptions
 */
export interface DeliveryOptions {
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof DeliveryOptions
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryOptions
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof DeliveryOptions
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryOptions
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. Choose from \'car\', \'bicycle\' and/or \'walking\'.
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryOptions
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Flag to specify if the delivery requires signature verification during dropoff
     * @type {boolean}
     * @memberof DeliveryOptions
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. If the ID is invalid, a field error will be returned. Create a support ticket in Developer Portal if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryOptions
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryOptions
     */
    'dropoff_cash_on_delivery'?: number;
}
/**
 * Delivery status and details provided by Doordash.
 * @export
 * @interface DeliveryOutput
 */
export interface DeliveryOutput {
    /**
     * Delivery status
     * @type {string}
     * @memberof DeliveryOutput
     */
    'delivery_status'?: DeliveryOutputDeliveryStatusEnum;
    /**
     * If delivery was cancelled, reason for why
     * @type {string}
     * @memberof DeliveryOutput
     */
    'cancellation_reason'?: DeliveryOutputCancellationReasonEnum;
    /**
     * The timestamp when the delivery info was updated.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'updated_at'?: string;
    /**
     * Estimated time of pickup in ISO-8601 format, or null if already picked up
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_time_estimated'?: string;
    /**
     * Actual time of pickup in ISO-8601 format, or null if not yet picked up
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_time_actual'?: string;
    /**
     * Estimated time of drop off in ISO-8601 format, or null if already picked up
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_time_estimated'?: string;
    /**
     * Actual time of drop off in ISO-8601 format, or null if not yet picked up
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_time_actual'?: string;
    /**
     * Estimated time of return in ISO-8601 format, or null if delivery is not returnable or already returned
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_time_estimated'?: string;
    /**
     * Actual time of return in ISO-8601 format, or null if return is not returnable or the return is not yet completed
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_time_actual'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_address'?: string;
    /**
     * Delivery Fee in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available
     * @type {number}
     * @memberof DeliveryOutput
     */
    'fee'?: number;
    /**
     * The charges that were applied for this delivery; sums to `fee`
     * @type {Array<FeeComponent>}
     * @memberof DeliveryOutput
     */
    'fee_components'?: Array<FeeComponent>;
    /**
     * Delivery tax in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available
     * @type {number}
     * @memberof DeliveryOutput
     */
    'tax'?: number;
    /**
     * The taxes that were applied for this delivery; sums to `tax`. Only returned for deliveries in Canada.
     * @type {Array<TaxComponent>}
     * @memberof DeliveryOutput
     */
    'tax_components'?: Array<TaxComponent>;
    /**
     * Unique reference value for requesting manual support, generated by Doordash.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'support_reference'?: string;
    /**
     * Tracking URL for tracking the order visually
     * @type {string}
     * @memberof DeliveryOutput
     */
    'tracking_url'?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_verification_image_url'?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_verification_image_url'?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_signature_image_url'?: string;
}
export declare const DeliveryOutputDeliveryStatusEnum: {
    readonly Quote: "quote";
    readonly Created: "created";
    readonly Confirmed: "confirmed";
    readonly EnrouteToPickup: "enroute_to_pickup";
    readonly ArrivedAtPickup: "arrived_at_pickup";
    readonly PickedUp: "picked_up";
    readonly EnrouteToDropoff: "enroute_to_dropoff";
    readonly ArrivedAtDropoff: "arrived_at_dropoff";
    readonly Delivered: "delivered";
    readonly EnrouteToReturn: "enroute_to_return";
    readonly ArrivedAtReturn: "arrived_at_return";
    readonly Returned: "returned";
    readonly Cancelled: "cancelled";
};
export declare type DeliveryOutputDeliveryStatusEnum = typeof DeliveryOutputDeliveryStatusEnum[keyof typeof DeliveryOutputDeliveryStatusEnum];
export declare const DeliveryOutputCancellationReasonEnum: {
    readonly CancelledByCreator: "cancelled_by_creator";
    readonly FailedToProcessPayment: "failed_to_process_payment";
    readonly FailedToAssignAndRefunded: "failed_to_assign_and_refunded";
    readonly FailedToPickup: "failed_to_pickup";
    readonly FailedToDeliver: "failed_to_deliver";
    readonly FailedToReturn: "failed_to_return";
};
export declare type DeliveryOutputCancellationReasonEnum = typeof DeliveryOutputCancellationReasonEnum[keyof typeof DeliveryOutputCancellationReasonEnum];
/**
 * Delivery pickup details.
 * @export
 * @interface DeliveryPickupDetails
 */
export interface DeliveryPickupDetails {
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with external_store_id to select pickup store by ID. If you provide an external_business_id, you must also provide an external_store_id. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an external_store_id, you must also provide an external_business_id. If you provide an external_store_id, the address of the store will override the pickup_address in the request. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/ .
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_external_store_id'?: string;
}
/**
 * Request body for quote accept endpoint
 * @export
 * @interface DeliveryQuoteAcceptInput
 */
export interface DeliveryQuoteAcceptInput {
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof DeliveryQuoteAcceptInput
     */
    'tip'?: number;
}
/**
 * Request body for quote endpoint
 * @export
 * @interface DeliveryQuoteInput
 */
export interface DeliveryQuoteInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'external_delivery_id': string;
    /**
     * IETF BCP 47 compliant string representing a user\'s language preference, for the purpose of communication, e.g. `en-US`.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'locale'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with external_store_id to select pickup store by ID. If you provide an external_business_id, you must also provide an external_store_id. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an external_store_id, you must also provide an external_business_id. If you provide an external_store_id, the address of the store will override the pickup_address in the request. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/ .
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_external_store_id'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_address': string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_phone_number': string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'currency'?: string;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryQuoteInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryQuoteInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_window'?: TimeWindow;
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryQuoteInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryQuoteInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. Choose from \'car\', \'bicycle\' and/or \'walking\'.
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryQuoteInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Flag to specify if the delivery requires signature verification during dropoff
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. If the ID is invalid, a field error will be returned. Create a support ticket in Developer Portal if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_cash_on_delivery'?: number;
}
/**
 * Delivery status and details.
 * @export
 * @interface DeliveryResponse
 */
export interface DeliveryResponse {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'external_delivery_id': string;
    /**
     * IETF BCP 47 compliant string representing a user\'s language preference, for the purpose of communication, e.g. `en-US`.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'locale'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with external_store_id to select pickup store by ID. If you provide an external_business_id, you must also provide an external_store_id. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an external_store_id, you must also provide an external_business_id. If you provide an external_store_id, the address of the store will override the pickup_address in the request. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/ .
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_external_store_id'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryResponse
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryResponse
     */
    'currency': string;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryResponse
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Delivery status
     * @type {string}
     * @memberof DeliveryResponse
     */
    'delivery_status': DeliveryResponseDeliveryStatusEnum;
    /**
     * If delivery was cancelled, reason for why
     * @type {string}
     * @memberof DeliveryResponse
     */
    'cancellation_reason'?: DeliveryResponseCancellationReasonEnum;
    /**
     * The timestamp when the delivery info was updated.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'updated_at'?: string;
    /**
     * Estimated time of pickup in ISO-8601 format, or null if already picked up
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_time_estimated'?: string;
    /**
     * Actual time of pickup in ISO-8601 format, or null if not yet picked up
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_time_actual'?: string;
    /**
     * Estimated time of drop off in ISO-8601 format, or null if already picked up
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_time_estimated'?: string;
    /**
     * Actual time of drop off in ISO-8601 format, or null if not yet picked up
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_time_actual'?: string;
    /**
     * Estimated time of return in ISO-8601 format, or null if delivery is not returnable or already returned
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_time_estimated'?: string;
    /**
     * Actual time of return in ISO-8601 format, or null if return is not returnable or the return is not yet completed
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_time_actual'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_address'?: string;
    /**
     * Delivery Fee in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available
     * @type {number}
     * @memberof DeliveryResponse
     */
    'fee': number;
    /**
     * The charges that were applied for this delivery; sums to `fee`
     * @type {Array<FeeComponent>}
     * @memberof DeliveryResponse
     */
    'fee_components'?: Array<FeeComponent>;
    /**
     * Delivery tax in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available
     * @type {number}
     * @memberof DeliveryResponse
     */
    'tax'?: number;
    /**
     * The taxes that were applied for this delivery; sums to `tax`. Only returned for deliveries in Canada.
     * @type {Array<TaxComponent>}
     * @memberof DeliveryResponse
     */
    'tax_components'?: Array<TaxComponent>;
    /**
     * Unique reference value for requesting manual support, generated by Doordash.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'support_reference'?: string;
    /**
     * Tracking URL for tracking the order visually
     * @type {string}
     * @memberof DeliveryResponse
     */
    'tracking_url'?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_verification_image_url'?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_verification_image_url'?: string;
    /**
     * Verification URL for showing the order was picked up/delivered
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_signature_image_url'?: string;
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryResponse
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof DeliveryResponse
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryResponse
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. Choose from \'car\', \'bicycle\' and/or \'walking\'.
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryResponse
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Flag to specify if the delivery requires signature verification during dropoff
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. If the ID is invalid, a field error will be returned. Create a support ticket in Developer Portal if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryResponse
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     * The unique identifier for the Dasher
     * @type {number}
     * @memberof DeliveryResponse
     */
    'dasher_id'?: number;
    /**
     * The first name and last initial of the Dasher delivering the order
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_name'?: string;
    /**
     * Phone number of the dasher for the dropoff contact to use. Number is masked for privacy
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_dropoff_phone_number'?: string;
    /**
     * Phone number of the dasher for the pickup contact to use. Number is masked for privacy
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_pickup_phone_number'?: string;
    /**
     *
     * @type {Location}
     * @memberof DeliveryResponse
     */
    'dasher_location'?: Location;
    /**
     * Make of the dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_make'?: string;
    /**
     * Model of the dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_model'?: string;
    /**
     * Year of the dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_year'?: string;
}
export declare const DeliveryResponseDeliveryStatusEnum: {
    readonly Quote: "quote";
    readonly Created: "created";
    readonly Confirmed: "confirmed";
    readonly EnrouteToPickup: "enroute_to_pickup";
    readonly ArrivedAtPickup: "arrived_at_pickup";
    readonly PickedUp: "picked_up";
    readonly EnrouteToDropoff: "enroute_to_dropoff";
    readonly ArrivedAtDropoff: "arrived_at_dropoff";
    readonly Delivered: "delivered";
    readonly EnrouteToReturn: "enroute_to_return";
    readonly ArrivedAtReturn: "arrived_at_return";
    readonly Returned: "returned";
    readonly Cancelled: "cancelled";
};
export declare type DeliveryResponseDeliveryStatusEnum = typeof DeliveryResponseDeliveryStatusEnum[keyof typeof DeliveryResponseDeliveryStatusEnum];
export declare const DeliveryResponseCancellationReasonEnum: {
    readonly CancelledByCreator: "cancelled_by_creator";
    readonly FailedToProcessPayment: "failed_to_process_payment";
    readonly FailedToAssignAndRefunded: "failed_to_assign_and_refunded";
    readonly FailedToPickup: "failed_to_pickup";
    readonly FailedToDeliver: "failed_to_deliver";
    readonly FailedToReturn: "failed_to_return";
};
export declare type DeliveryResponseCancellationReasonEnum = typeof DeliveryResponseCancellationReasonEnum[keyof typeof DeliveryResponseCancellationReasonEnum];
/**
 * Delivery value details.
 * @export
 * @interface DeliveryValueDetails
 */
export interface DeliveryValueDetails {
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof DeliveryValueDetails
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryValueDetails
     */
    'currency'?: string;
}
/**
 * Error returned when delivery creation request is duplicate and has a delivery already created for it.
 * @export
 * @interface DuplicateDeliveryIdError
 */
export interface DuplicateDeliveryIdError {
    /**
     *
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'code': DuplicateDeliveryIdErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'message': string;
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'external_delivery_id': string;
}
export declare const DuplicateDeliveryIdErrorCodeEnum: {
    readonly DuplicateDeliveryId: "duplicate_delivery_id";
};
export declare type DuplicateDeliveryIdErrorCodeEnum = typeof DuplicateDeliveryIdErrorCodeEnum[keyof typeof DuplicateDeliveryIdErrorCodeEnum];
/**
 * The charges that were applied for this delivery; sums to `fee`
 * @export
 * @interface FeeComponent
 */
export interface FeeComponent {
    /**
     * Name of the fee component.
     * @type {string}
     * @memberof FeeComponent
     */
    'type': FeeComponentTypeEnum;
    /**
     * Amount of the fee component in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof FeeComponent
     */
    'amount': number;
}
export declare const FeeComponentTypeEnum: {
    readonly DriveFeeComponentTypeUnspecified: "drive_fee_component_type_unspecified";
    readonly DistanceBasedFee: "distance_based_fee";
    readonly OrderValueBasedFee: "order_value_based_fee";
    readonly ServiceFee: "service_fee";
    readonly MxSubsidy: "mx_subsidy";
    readonly Other: "other";
    readonly DasherRegulatoryFee: "dasher_regulatory_fee";
    readonly Promotion: "promotion";
};
export declare type FeeComponentTypeEnum = typeof FeeComponentTypeEnum[keyof typeof FeeComponentTypeEnum];
/**
 * A field whose value couldn\'t be validated.
 * @export
 * @interface FieldError
 */
export interface FieldError {
    /**
     * Name of the field whose value couldn\'t be validated.
     * @type {string}
     * @memberof FieldError
     */
    'field': string;
    /**
     * The error that was encountered when validating the field\'s value.
     * @type {string}
     * @memberof FieldError
     */
    'error': string;
}
/**
 *
 * @export
 * @interface InvalidDeliveryError
 */
export interface InvalidDeliveryError {
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'code': InvalidDeliveryErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'reason': InvalidDeliveryErrorReasonEnum;
}
export declare const InvalidDeliveryErrorCodeEnum: {
    readonly InvalidDeliveryParameters: "invalid_delivery_parameters";
};
export declare type InvalidDeliveryErrorCodeEnum = typeof InvalidDeliveryErrorCodeEnum[keyof typeof InvalidDeliveryErrorCodeEnum];
export declare const InvalidDeliveryErrorReasonEnum: {
    readonly DistanceTooLong: "distance_too_long";
    readonly PickupAddressNotInCoverage: "pickup_address_not_in_coverage";
    readonly DeliveryAddressNotInCoverage: "delivery_address_not_in_coverage";
    readonly OutsideOfDeliveryTime: "outside_of_delivery_time";
};
export declare type InvalidDeliveryErrorReasonEnum = typeof InvalidDeliveryErrorReasonEnum[keyof typeof InvalidDeliveryErrorReasonEnum];
/**
 * Geolocation value in latitute and longitude
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Latitude of the location
     * @type {number}
     * @memberof Location
     */
    'lat': number;
    /**
     * Longitude of the location
     * @type {number}
     * @memberof Location
     */
    'lng': number;
}
/**
 * An object that specifies the restricted item(s) contained in this order
 * @export
 * @interface OrderContains
 */
export interface OrderContains {
    /**
     * Flag to specify if the delivery contains alcohol
     * @type {boolean}
     * @memberof OrderContains
     */
    'alcohol'?: boolean;
}
/**
 * Internal service failure, please try again later.
 * @export
 * @interface ServerFault
 */
export interface ServerFault {
    /**
     *
     * @type {string}
     * @memberof ServerFault
     */
    'code': ServerFaultCodeEnum;
    /**
     *
     * @type {string}
     * @memberof ServerFault
     */
    'message': string;
}
export declare const ServerFaultCodeEnum: {
    readonly ServiceFault: "service_fault";
};
export declare type ServerFaultCodeEnum = typeof ServerFaultCodeEnum[keyof typeof ServerFaultCodeEnum];
/**
 * The taxes that were applied for this delivery; sums to `tax`. Only returned for deliveries in Canada.
 * @export
 * @interface TaxComponent
 */
export interface TaxComponent {
    /**
     * Name of the tax component.
     * @type {string}
     * @memberof TaxComponent
     */
    'type': TaxComponentTypeEnum;
    /**
     * Amount of the tax component in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof TaxComponent
     */
    'amount': number;
}
export declare const TaxComponentTypeEnum: {
    readonly TaxTypeUnspecified: "tax_type_unspecified";
    readonly GstHst: "gst_hst";
    readonly Qst: "qst";
    readonly Pst: "pst";
};
export declare type TaxComponentTypeEnum = typeof TaxComponentTypeEnum[keyof typeof TaxComponentTypeEnum];
/**
 * The UTC date-time (in ISO-8601 format) overrides dropoff_time and pickup_time when all four parameters of the time window (i.e. pickup_window_start_time , pickup_window_end_time , dropoff_window_start_time , dropoff_window_end_time ) are provided.
 * @export
 * @interface TimeWindow
 */
export interface TimeWindow {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof TimeWindow
     */
    'start_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof TimeWindow
     */
    'end_time'?: string;
}
/**
 * External delivery ID was not found.
 * @export
 * @interface UnknownDeliveryError
 */
export interface UnknownDeliveryError {
    /**
     *
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'code': UnknownDeliveryErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'message': string;
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'external_delivery_id': string;
}
export declare const UnknownDeliveryErrorCodeEnum: {
    readonly UnknownDeliveryId: "unknown_delivery_id";
};
export declare type UnknownDeliveryErrorCodeEnum = typeof UnknownDeliveryErrorCodeEnum[keyof typeof UnknownDeliveryErrorCodeEnum];
/**
 *
 * @export
 * @interface UpdateDeliveryInput
 */
export interface UpdateDeliveryInput {
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help dasher identify the correct delivery item for pickup/dropoff
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with external_store_id to select pickup store by ID. If you provide an external_business_id, you must also provide an external_store_id. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an external_store_id, you must also provide an external_business_id. If you provide an external_store_id, the address of the store will override the pickup_address in the request. This field is validated using the following regular expression: /^[A-Za-z0-9_-]{3,64}$/ .
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_external_store_id'?: string;
    /**
     * Comma separated full address, in the order appropriate for your locale. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help dashers find the location. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_business_name'?: string;
    /**
     * The phone number for the Dasher to call, including country code, if there are any issues with the pick up. The phone number must be a valid US phone number. Overridden by store properties if external_store_id and external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow upon pickup of the order.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact; cannot contain ~, `, @, #, $, %, ^, &, *, +, =, ?, ;, [, {, ], }
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is false. Cannot be updated.
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     * Flag to specify if the delivery should be Contactless
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof UpdateDeliveryInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof UpdateDeliveryInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. Choose from \'car\', \'bicycle\' and/or \'walking\'.
     * @type {Array<DasherVehicleType>}
     * @memberof UpdateDeliveryInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Flag to specify if the delivery requires signature verification during dropoff
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. If the ID is invalid, a field error will be returned. Create a support ticket in Developer Portal if your promotion ID isn\'t working.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'currency'?: string;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof UpdateDeliveryInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof UpdateDeliveryInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_window'?: TimeWindow;
}
/**
 *
 * @export
 * @interface UpdateNotAllowedError
 */
export interface UpdateNotAllowedError {
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'code': UpdateNotAllowedErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'reason': UpdateNotAllowedErrorReasonEnum;
}
export declare const UpdateNotAllowedErrorCodeEnum: {
    readonly UpdateNotAllowed: "update_not_allowed";
};
export declare type UpdateNotAllowedErrorCodeEnum = typeof UpdateNotAllowedErrorCodeEnum[keyof typeof UpdateNotAllowedErrorCodeEnum];
export declare const UpdateNotAllowedErrorReasonEnum: {
    readonly DeliveryCancelled: "delivery_cancelled";
    readonly DeliveryCompleted: "delivery_completed";
    readonly DeliveryCreationInProgress: "delivery_creation_in_progress";
    readonly DeliveryPickedUp: "delivery_picked_up";
    readonly DeliveryAbandoned: "delivery_abandoned";
    readonly UpdateWindowClosed: "update_window_closed";
};
export declare type UpdateNotAllowedErrorReasonEnum = typeof UpdateNotAllowedErrorReasonEnum[keyof typeof UpdateNotAllowedErrorReasonEnum];
/**
 * One or more request values couldn\'t be validated.
 * @export
 * @interface ValidationFieldError
 */
export interface ValidationFieldError {
    /**
     *
     * @type {string}
     * @memberof ValidationFieldError
     */
    'code': ValidationFieldErrorCodeEnum;
    /**
     * One or more request values couldn\'t be validated.
     * @type {string}
     * @memberof ValidationFieldError
     */
    'message': string;
    /**
     * The list of fields whose values couldn\'t be validated.
     * @type {Array<FieldError>}
     * @memberof ValidationFieldError
     */
    'field_errors': Array<FieldError>;
}
export declare const ValidationFieldErrorCodeEnum: {
    readonly ValidationError: "validation_error";
};
export declare type ValidationFieldErrorCodeEnum = typeof ValidationFieldErrorCodeEnum[keyof typeof ValidationFieldErrorCodeEnum];
/**
 * RequestDasherApi - axios parameter creator
 * @export
 */
export declare const RequestDasherApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery: (externalDeliveryId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery: (createDeliveryInput: CreateDeliveryInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote: (deliveryQuoteInput: DeliveryQuoteInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept: (externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery: (externalDeliveryId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery: (externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RequestDasherApi - functional programming interface
 * @export
 */
export declare const RequestDasherApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery(externalDeliveryId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery(externalDeliveryId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeliveryResponse>>;
};
/**
 * RequestDasherApi - factory interface
 * @export
 */
export declare const RequestDasherApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery(externalDeliveryId: string, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput | undefined, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery(externalDeliveryId: string, options?: any): AxiosPromise<DeliveryResponse>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: any): AxiosPromise<DeliveryResponse>;
};
/**
 * RequestDasherApi - object-oriented interface
 * @export
 * @class RequestDasherApi
 * @extends {BaseAPI}
 */
export declare class RequestDasherApi extends BaseAPI {
    /**
     * Cancel delivery
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    cancelDelivery(externalDeliveryId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Create a delivery
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Get a quote on delivery fee and validate coverage.
     * @summary Delivery Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Accept Delivery Quote
     * @summary Accept Delivery Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Get delivery status and details
     * @summary Get Delivery Status
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    getDelivery(externalDeliveryId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Update the time or address for a delivery
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestDasherApi
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
}
